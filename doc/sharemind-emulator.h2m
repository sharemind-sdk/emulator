/Runs the bytecode specified by/

The arguments to the bytecode process are passed through an argument stream,
which is constructed using command line options and/or read from standard input
(when using the --stdin flag). The results published by the bytecode process are
written to standard output, unless an --outFile= option is given to write the
results to the given file. Both the input argument stream and the output result
stream follow the syntax of the ARGUMENT STREAM PROTOCOL detailed below.

[Example]

To run a bytecode process without any arguments and discard the output, one may
use:

    sharemind-emulator --conf=/path/to/sharemind-emulator.conf \\
                       /path/to/bytecode \\
                       --outFile=/dev/null --forceOutFile

To pass an argument named "arg1" of protection domain "pd_shared3p" and type
"uint64" with a value of 42 to the emulator, one may use

    sharemind-emulator --conf=/path/to/sharemind-emulator.conf \\
                       /path/to/bytecode \\
                       --str=arg1 --str=pd_shared3p --str=uint64 --size=8 \\
                       --uint64=42

To pass the contents of a file as a public string argument, one may use:

    sharemind-emulator --conf=/path/to/sharemind-emulator.conf \\
                       /path/to/bytecode \\
                       --str=arg1 --str= --str=string --file=/path/to/file

[Argument stream protocol]
The argument stream is a unidirectional binary stream for the delivery of
arguments (and results) into (or out of) the bytecode process.

The simple protocol can be described in pseudo-C packed structures as follows:

  struct Argument {
    uint64_t argumentNameSize;
    char     argumentName[argumentNameSize];
    uint64_t protectionDomainNameSize;
    char     protectionDomainName[protectionDomainNameSize];
    uint64_t typeNameSize;
    char     typeName[typeNameSize];
    uint64_t argumentDataSize;
    char     argumentData[argumentDataSize];
  } arguments[num_arguments];

Little-endian is assumed for the uint64_t size values.

[Argument stream decipher]
To ease the usage of the emulator we have included a simple python script `arguments-stream-decipher.py` that
converts the arguments stream protocol to human readable format.
